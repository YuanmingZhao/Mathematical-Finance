import numpy as np
import math
import matplotlib
import matplotlib.pyplot as plt
import scipy.linalg as la
from scipy.stats import norm

#%% Parameters
K = 20
T = 1
sigma = 0.25
r = 0.05
#%%
a = np.log(K) - np.abs(r - 0.5*sigma**2)*T - 3*sigma*np.sqrt(T) # Min log price
b = np.log(K) + np.abs(r - 0.5*sigma**2)*T + 3*sigma*np.sqrt(T) # Max log price
N = 2**6 # number of space step
alpha = 15
M = math.ceil(T/(alpha*((b-a)/2**6)**2)) # number of time steps
dt = T/M # time step
dx = (b-a)/N # price space step

S = np.exp(a + np.arange(0,N+1)*dx)
plt.plot(S)

def American_put_option(K, T, sigma, r, alpha):
    a = np.log(K) - np.abs(r - 0.5*sigma**2)*T - 3*sigma*np.sqrt(T) # Min log price
    b = np.log(K) + np.abs(r - 0.5*sigma**2)*T + 3*sigma*np.sqrt(T) # Max log price
    N = 2**6 # number of space step

    M = math.ceil(T/(alpha*((b-a)/2**6)**2)) # number of time steps
    dt = T/M # time step
    dx = (b-a)/N # price space step
    # option matrix
    u = np.zeros((N+1, M+1))

    # terminal condition
    u[:, M] = np.maximum(K - np.exp(a + np.arange(0,N+1)*dx),0)

    # boundary condition
    u[N, 0:M] = 0 # b
    u[0, 0:M] = K*np.exp(-r*(T - np.arange(0,M)*dt)) - np.exp(a) # a
    #u[N, 0:M] = K - np.exp(a)

    # the matrix coefficients of the explict algorithm
    pp = ((sigma**2)*dt)/(2*(dx)**2) + (r - (sigma**2)/2)*(dt/(2*dx))
    pm = ((sigma**2)*dt)/(2*(dx)**2) - (r - (sigma**2)/2)*(dt/(2*dx))
    p = 1 - pp - pm
    
    for m in range(M, 0, -1):
        for n in range(N-1, 0, -1):
            u[n, m-1] = (p - r*dt)*u[n, m] + pp*u[n+1, m] + pm*u[n-1, m]
            
    x = np.zeros((N+1, M+1))
    for i in range(0, N+1):
        for j in range(0,M+1):
            x[i, j] = max(u[i,j], K - np.exp(a + i*dx))
    
    return x

#%%
S = np.exp(a + np.arange(0,N+1)*dx)
plt.plot(S, American_put_option(20, 1, 0.25, 0.05, 15)[:,0], label = r"t = 0")
plt.plot(S, American_put_option(20, 1, 0.25, 0.05, 15)[:,round((M+1)/2)], label = r"t = $\frac{1}{2}$ T")
plt.plot(S, American_put_option(20, 1, 0.25, 0.05, 15)[:,-1], label = r"t = T")
plt.legend()
plt.title(r"$\alpha$ = 15")
plt.show()
#%%
S = np.exp(a + np.arange(0,N+1)*dx)
plt.plot(S, American_put_option(20, 1, 0.25, 0.05, 17)[:,0], label = r"t = 0")
plt.plot(S, American_put_option(20, 1, 0.25, 0.05, 17)[:,round((M+1)/2)], label = r"t = $\frac{1}{2}$ T")
plt.plot(S, American_put_option(20, 1, 0.25, 0.05, 17)[:,-1], label = r"t = T")
plt.legend()
plt.title(r"$\alpha$ = 17")
plt.show()
